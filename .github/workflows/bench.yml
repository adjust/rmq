name: bench
on:
  pull_request:
  workflow_dispatch:
    inputs:
      old:
        description: 'Old Ref'
        required: false
        default: 'master'
      new:
        description: 'New Ref'
        required: true

# Cancel the workflow in progress in newer build is about to start.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO111MODULE: "on"
  CACHE_BENCHMARK: "off"    # Enables benchmark result reuse between runs, may skew latency results.
  RUN_BASE_BENCHMARK: "on"  # Runs benchmark for PR base in case benchmark result is missing.
  GO_VERSION: 1.19.x
  BENCH_COUNT: 6
jobs:
  bench:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go stable
        if: env.GO_VERSION != 'tip'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Go tip
        if: env.GO_VERSION == 'tip'
        run: |
          curl -sL https://storage.googleapis.com/go-build-snap/go/linux-amd64/$(git ls-remote https://github.com/golang/go.git HEAD | awk '{print $1;}').tar.gz -o gotip.tar.gz
          ls -lah gotip.tar.gz
          mkdir -p ~/sdk/gotip
          tar -C ~/sdk/gotip -xzf gotip.tar.gz
          ~/sdk/gotip/bin/go version
          echo "PATH=$HOME/go/bin:$HOME/sdk/gotip/bin/:$PATH" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ (github.event.inputs.new != '') && github.event.inputs.new || github.event.ref }}

      - name: Go cache
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache

      - name: Restore benchstat
        uses: actions/cache@v2
        with:
          path: ~/go/bin/benchstat
          key: ${{ runner.os }}-benchstat-legacy

      - name: Restore base benchmark result
        id: base-benchmark
        if: env.CACHE_BENCHMARK == 'on'
        uses: actions/cache@v2
        with:
          path: |
            bench-master.txt
          # Use base sha for PR or new commit hash for master/main push in benchmark result key.
          key: ${{ runner.os }}-bench-${{ (github.event.pull_request.base.sha != github.event.after) && github.event.pull_request.base.sha || github.event.after }}

      - name: Run benchmark
        run: |
          test -s ~/go/bin/benchstat || GOFLAGS= GOBIN=~/go/bin go install golang.org/x/perf/cmd/benchstat@a1b99499bab64a73929f3ed7c2103c28d30e9ac2
          export REF_NAME=new
          go test -bench=. -benchmem -count=${BENCH_COUNT} -run=^a  ./... | tee bench-${REF_NAME}.txt

      - name: Run benchmark for base code
        if: env.RUN_BASE_BENCHMARK == 'on' && steps.base-benchmark.outputs.cache-hit != 'true' && (github.event.pull_request.base.sha != '' || github.event.inputs.old != '')
        run: |
          git fetch origin master ${{ github.event.pull_request.base.sha }}
          HEAD=$(git rev-parse HEAD)
          git reset --hard ${{ github.event.pull_request.base.sha }}
          export REF_NAME=master
          go test -bench=. -benchmem -count=$BENCH_COUNT -run=^a  ./... | tee bench-$REF_NAME.txt
          ~/go/bin/benchstat bench-$REF_NAME.txt
          git reset --hard $HEAD

      - name: Benchmark stats
        id: bench
        run: |
          export REF_NAME=new
          OUTPUT=$(test -e bench-master.txt && ~/go/bin/benchstat bench-master.txt bench-$REF_NAME.txt || echo "Missing base report.")
          echo "${OUTPUT}"
          echo "diff<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          OUTPUT=$(~/go/bin/benchstat bench-$REF_NAME.txt)
          echo "${OUTPUT}"
          echo "result<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment benchmark result
        continue-on-error: true
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: bench
          message: |
            ### Benchmark Result
            <details><summary>Benchmark diff with base branch</summary>

            ```
            ${{ steps.bench.outputs.diff }}
            ```
            </details>

            <details><summary>Benchmark result</summary>

            ```
            ${{ steps.bench.outputs.result }}
            ```
            </details>
